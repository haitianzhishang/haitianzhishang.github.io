<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-06T11:59:21+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hi, it’s vayne</title><subtitle>Recording study work and life</subtitle><entry><title type="html">Iverilog include file</title><link href="http://localhost:4000/blog/Iverilog_include" rel="alternate" type="text/html" title="Iverilog include file" /><published>2022-04-05T00:00:00+08:00</published><updated>2022-04-05T00:00:00+08:00</updated><id>http://localhost:4000/blog/Iverilog_include</id><content type="html" xml:base="http://localhost:4000/blog/Iverilog_include"><![CDATA[<h1 id="iverilog-include-file">Iverilog include file</h1>

<h3 id="the-including-file-and-module-in-testbench-cant-be-found">The including file and module in testbench can’t be found.</h3>

<p><img src="https://i.stack.imgur.com/g4eXf.png" alt="" /></p>

<p>The original source list is below</p>

<p><img src="https://i.stack.imgur.com/WYx3d.png" alt="" /></p>

<h3 id="fixed-by-adding--incdir">Fixed by adding  +incdir</h3>

<p><img src="https://i.stack.imgur.com/oBjBk.png" alt="" /></p>]]></content><author><name></name></author><category term="Tools" /><summary type="html"><![CDATA[Error when compiling RTL with include]]></summary></entry><entry><title type="html">Git init</title><link href="http://localhost:4000/blog/Git_init" rel="alternate" type="text/html" title="Git init" /><published>2022-03-08T00:00:00+08:00</published><updated>2022-03-08T00:00:00+08:00</updated><id>http://localhost:4000/blog/Git_init</id><content type="html" xml:base="http://localhost:4000/blog/Git_init"><![CDATA[<h1 id="git-init">Git init</h1>

<hr />
<h3 id="create-a-new-repository-on-the-command-line">create a new repository on the command line</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "# Hello" &gt;&gt; README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin &lt;remote_name&gt; &lt;remote_repo_url&gt;
git push -u origin main
</code></pre></div></div>

<h3 id="push-an-existing-repository-from-the-command-line">push an existing repository from the command line</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add origin &lt;remote_name&gt; &lt;remote_repo_url&gt;
git branch -M main
git push -u origin main
</code></pre></div></div>]]></content><author><name></name></author><category term="Tools" /><summary type="html"><![CDATA[Initialize a new git repo]]></summary></entry><entry><title type="html">iverilog install</title><link href="http://localhost:4000/blog/Install_iverilog" rel="alternate" type="text/html" title="iverilog install" /><published>2022-03-07T00:00:00+08:00</published><updated>2022-03-07T00:00:00+08:00</updated><id>http://localhost:4000/blog/Install_iverilog</id><content type="html" xml:base="http://localhost:4000/blog/Install_iverilog"><![CDATA[<h1 id="iverilog-simulator">Iverilog simulator</h1>

<hr />
<h2 id="add-the-universe-repository-in-etcaptsourcelist">Add the universe repository in /etc/apt/source.list</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/apt/sources.list
Add below repos <span class="k">in </span>this file
deb http://archive.ubuntu.com/ubuntu/ edgy universe 
deb-src http://archive.ubuntu.com/ubuntu/ edgy universe
Then run
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>iverilog
</code></pre></div></div>

<h2 id="ppa-for-icarus-verilog">PPA for Icarus verilog</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/apt/sources.list
Add below repos <span class="k">in </span>this file
deb http://ppa.launchpad.net/team-electronics/ppa/ubuntu jaunty main 
deb-src http://ppa.launchpad.net/team-electronics/ppa/ubuntu jaunty main
</code></pre></div></div>

<h2 id="add-repository-key-to-system-to-avoid-warnings">Add repository key to system to avoid warnings</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-key adv <span class="nt">--recv-keys</span> <span class="nt">--keyserver</span> keyserver.ubuntu.com 7FE97A0D3D7F2EA1
</code></pre></div></div>

<h2 id="update-the-local-repository-cache-and-install-update-the-icarus-verilog-package">Update the local repository cache and Install (update) the Icarus verilog package</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>verilog
</code></pre></div></div>

<h2 id="add-a-new-ppa">Add a new PPA</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:team-electronics/ppa
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>verilog
</code></pre></div></div>

<h2 id="install-gtkwave">Install gtkwave</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gtkwave
</code></pre></div></div>

<hr />

<p>Details can be found at <strong><a href="http://iverilog.icarus.com/">iverilog website</a></strong></p>]]></content><author><name></name></author><category term="Tools" /><summary type="html"><![CDATA[Install iverilog simulator and gtkwave wave viewer in Ubuntu]]></summary></entry><entry><title type="html">MIPS CPU</title><link href="http://localhost:4000/blog/MIPS_CPU_Archi" rel="alternate" type="text/html" title="MIPS CPU" /><published>2022-03-07T00:00:00+08:00</published><updated>2022-03-07T00:00:00+08:00</updated><id>http://localhost:4000/blog/MIPS_CPU_Archi</id><content type="html" xml:base="http://localhost:4000/blog/MIPS_CPU_Archi"><![CDATA[<h1 id="mips-cpu-architecture">MIPS CPU Architecture</h1>

<hr />
<p><img src="https://github.com/haitianzhishang/MIPS_CPU/blob/main/datasheet/MIPS%20CPU.drawio.png?raw=true" alt="Architecture" /></p>]]></content><author><name></name></author><category term="Digital IC Design" /><summary type="html"><![CDATA[MIPS CPU Architecture]]></summary></entry><entry><title type="html">MIPS CPU</title><link href="http://localhost:4000/blog/MIPS_CPU" rel="alternate" type="text/html" title="MIPS CPU" /><published>2022-02-24T00:00:00+08:00</published><updated>2022-02-24T00:00:00+08:00</updated><id>http://localhost:4000/blog/MIPS_CPU</id><content type="html" xml:base="http://localhost:4000/blog/MIPS_CPU"><![CDATA[<h1 id="mips-cpu-architecture">MIPS CPU Architecture</h1>

<hr />
<h2 id="instruction-filed">Instruction filed</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">OP</th>
      <th style="text-align: center">RS</th>
      <th style="text-align: center">RT</th>
      <th style="text-align: center">RD</th>
      <th style="text-align: center">Shamt</th>
      <th style="text-align: center">Funct</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">6bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">6bits</td>
    </tr>
  </tbody>
</table>

<p>OP: Operation of the instruction</p>

<p>RS: First register source operand</p>

<p>RT: Second register source operand</p>

<p>RD:Register destination operand</p>

<p>Shamt: Shift amount</p>

<p>Funct: Function filed(select specific variant of opcode)</p>

<h2 id="operand-and-address-mode">Operand and Address mode</h2>

<h3 id="two-operands-32-registers-and-230-memory">Two operands: 32 registers and 2^30 memory</h3>
<h3 id="address-mode">Address mode</h3>
<p>Register direct mode: RS the first register source operand is the address of operand register</p>

<p>Immediate mode: {RD, Shamt, Funct} is the address of the operand memory</p>

<p>Displacement mode: {RD, Shamt, Funct} + value stored in the RS register is the address of the operand memory</p>

<p>PC-relative mode: {RD, Shamt, Funct} + value stored in the PC register is the address of the operand memory</p>

<h2 id="instruction-type">Instruction Type</h2>

<h3 id="r-type">R-type</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">OP</th>
      <th style="text-align: center">RS</th>
      <th style="text-align: center">RT</th>
      <th style="text-align: center">RD</th>
      <th style="text-align: center">Shamt</th>
      <th style="text-align: center">Funct</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">6bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">6bits</td>
    </tr>
  </tbody>
</table>

<p>Use three registers as operand to do logic operation</p>

<p>For example</p>

<p><code class="language-plaintext highlighter-rouge">$t0 &lt;- $s1 + $s2</code></p>

<p><code class="language-plaintext highlighter-rouge">add $t0, $s1, $s2</code></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">OP</th>
      <th style="text-align: center">RS</th>
      <th style="text-align: center">RT</th>
      <th style="text-align: center">RD</th>
      <th style="text-align: center">Shamt</th>
      <th style="text-align: center">Funct</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">000000</td>
      <td style="text-align: center">10001</td>
      <td style="text-align: center">10010</td>
      <td style="text-align: center">01000</td>
      <td style="text-align: center">00000</td>
      <td style="text-align: center">100000</td>
    </tr>
  </tbody>
</table>

<h3 id="i-type">I-type</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">OP</th>
      <th style="text-align: center">RS</th>
      <th style="text-align: center">RT</th>
      <th style="text-align: center">Immed address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">6bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">5bits</td>
      <td style="text-align: center">16bits</td>
    </tr>
  </tbody>
</table>

<p>Use two registers and an immediate address to do data transfer</p>

<p>For example</p>

<p><code class="language-plaintext highlighter-rouge">Load Memory[$s2+40] to $t0</code></p>

<p><code class="language-plaintext highlighter-rouge">lw $t0, 40($s2)</code></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">OP</th>
      <th style="text-align: center">RS</th>
      <th style="text-align: center">RT</th>
      <th style="text-align: center">Immed address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">100011</td>
      <td style="text-align: center">10010</td>
      <td style="text-align: center">01000</td>
      <td style="text-align: center">0000000000101000</td>
    </tr>
  </tbody>
</table>

<h3 id="j-type">J-type</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">OP</th>
      <th style="text-align: center">address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">6bits</td>
      <td style="text-align: center">26bits</td>
    </tr>
  </tbody>
</table>

<p>Use for instruction jumping</p>

<p>The address of the instruction jump into is the sum of  4 MSB of PC and shifted 2 bits address</p>

<p><code class="language-plaintext highlighter-rouge">Next instruction address = PC[31:28]+ address&gt;&gt;2</code></p>]]></content><author><name></name></author><category term="Digital IC Design" /><summary type="html"><![CDATA[Review MIPS CPU Architecture]]></summary></entry><entry><title type="html">First Blog</title><link href="http://localhost:4000/blog/First_Blog" rel="alternate" type="text/html" title="First Blog" /><published>2022-02-23T00:00:00+08:00</published><updated>2022-02-23T00:00:00+08:00</updated><id>http://localhost:4000/blog/First_Blog</id><content type="html" xml:base="http://localhost:4000/blog/First_Blog"><![CDATA[<p>Dogs and Cats</p>]]></content><author><name></name></author><category term="Daily" /><summary type="html"><![CDATA[Create my own website and upload the first blog]]></summary></entry></feed>